[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "ci-framework-tools"
version = "0.0.1"
description = "Internal tools and scripts for the CI Framework."
authors = [
    { name = "MementoRC", email = "your-email@example.com" }
]
dependencies = [
]

[project.optional-dependencies]

[tool.pixi.project]
name = "ci-framework-tools"
version = "0.0.1"
channels = ["conda-forge"]
platforms = ["linux-64"]  # Local development on linux, CI matrix handles cross-platform testing

# Core dependencies for the default environment
[tool.pixi.dependencies]
python = "3.12.*"
pytest = "*"
psutil = "*"
pandas = "*"
pyyaml = "*"
requests = "*"
hypothesis = "*"
pytest-workflow = ">=2.1.0,<3"
pytest-cov = ">=6.2.1,<7"
pytest-mock = ">=3.14.1,<4"
responses = ">=0.25.7,<0.26"
tomli-w = "*"  # TOML writing for migration tools

# ===== TIERED QUALITY FEATURES =====
# TIER 1: Essential Quality Gates (ZERO-TOLERANCE)
[tool.pixi.feature.quality.dependencies]
# Core Testing Framework
pytest = ">=8.0.0"
pytest-cov = ">=4.0.0"
pytest-timeout = ">=2.1.0"
pytest-asyncio = ">=0.21.0"
pytest-xdist = ">=3.3.0"

# Type Checking
mypy = ">=1.0.0"

# Core Linting & Formatting (ruff already in base dependencies)
ruff = "*"

# TIER 2: Extended Quality & Security
[tool.pixi.feature.quality-extended.dependencies]
# Security Scanning
bandit = ">=1.7.0"
pip-audit = ">=2.6.0"

# Code Quality Analysis
radon = ">=6.0.0"
vulture = ">=2.7.0"

# Git Hooks
pre-commit = ">=3.0.0"

# TIER 3: CI/CD & Build
[tool.pixi.feature.quality-ci.dependencies]
# CI Reporting
pytest-json-report = ">=1.5.0"
pytest-html = ">=4.0.0"

# Build Tools
python-build = ">=0.10.0"

# Coverage Tools
coverage = ">=7.0.0"

# TIER 4: Development & Specialized Tools
[tool.pixi.feature.dev-specialized.dependencies]
# Legacy development tools
black = "*"
yamllint = "*"
actionlint = "*"
bc-detect-secrets = "*"
twine = "*"
cyclonedx-bom = "*"
filelock = "*"

# Performance & Analysis
memory_profiler = "*"
pytest-benchmark = "*"

[tool.pixi.environments]
# Basic runtime environment
default = {solve-group = "default"}

# Quality gate environments (tiered approach)
quality = {features = ["quality"], solve-group = "default"}
quality-extended = {features = ["quality", "quality-extended"], solve-group = "default"}
quality-full = {features = ["quality", "quality-extended", "quality-ci"], solve-group = "default"}

# Development environment (full quality + specialized tools)
dev = {features = ["quality", "quality-extended", "quality-ci", "dev-specialized"], solve-group = "default"}

# CI environment (quality + CI reporting)
ci = {features = ["quality", "quality-ci"], solve-group = "default"}

# Ensure proper environment isolation
[tool.pixi.activation]
env = { PYTHONNOUSERSITE = "1" }

[tool.pixi.tasks]
# ===== TIER 1: CORE DEVELOPMENT TASKS (ESSENTIAL) =====
# Installation & Setup
install-editable = "pip install -e ."
dev = "echo 'Development environment ready'"

# Testing (ZERO-TOLERANCE QUALITY GATES)
test = "pixi run -e quality test-impl"
test-impl = "pytest framework/tests/ -v"
test-cov = "pytest framework/tests/ --cov=framework --cov-report=term-missing --cov-report=xml"
test-unit = "pytest framework/tests/unit/ -v"
test-integration = "pytest framework/tests/integration/ -v"
test-property = "pytest framework/tests/property/ -v"
test-security = "pytest framework/tests/security/ -v"
test-reporting = "pytest framework/tests/reporting/ -v"
test-performance = "pytest framework/tests/performance/ -v"
test-maintenance = "pytest framework/tests/maintenance/ -v"

# Quality Gates (CRITICAL - MUST PASS)
lint = "pixi run -e quality lint-impl"
lint-impl = "ruff check framework/ --select=F,E9"
lint-full = "pixi run -e quality lint-full-impl"
lint-full-impl = "ruff check framework/"
lint-fix = "ruff check --fix framework/"
format = "ruff format framework/"
format-check = "ruff format --check framework/"
typecheck = "pixi run -e quality typecheck-impl"
typecheck-impl = "mypy framework/"

# Combined Quality Check - ðŸš¨ MANDATORY BEFORE COMMIT
quality = { depends-on = ["test", "lint", "typecheck"] }   # NEVER commit without this passing

# Emergency Quality Fix - USE FOR "Found X errors" CI FAILURES  
emergency-fix = "pixi run lint-fix && pixi run format && pixi run test"

# ===== TIER 2: SECURITY & COMPLIANCE TASKS =====
# Security Scanning
security-scan = "bandit -r framework/ --severity-level high -x framework/tests/"
safety-check = "pip-audit --verbose"
complexity-check = "radon cc framework/ --min B"
dead-code-check = "vulture framework/ --min-confidence 80"

# Static Analysis Suite
static-analysis = { depends-on = ["security-scan", "safety-check", "complexity-check", "dead-code-check"] }

# Comprehensive Check
check-all = { depends-on = ["quality", "static-analysis"] }

# ===== TIER 3: CI/CD & DEPLOYMENT TASKS =====
# CI-specific variants
ci-test = { cmd = "pytest framework/tests/ --cov=framework --cov-report=xml", env = { ENVIRONMENT = "ci" } }
ci-lint = "ruff check framework/ --output-format=github"
ci-format-check = "ruff format --check framework/"

# Build & Deploy
build = "python -m build"
clean = "rm -rf __pycache__ .pytest_cache .coverage htmlcov .ruff_cache dist build"

# Pre-commit Integration - PREVENT CI FAILURES
pre-commit = "pre-commit run --all-files"
install-pre-commit = "pre-commit install --install-hooks"   # ðŸš¨ ESSENTIAL: Run once per developer

# ===== LEGACY/SPECIALIZED TASKS =====
# Keep existing specialized tasks for backward compatibility
yaml-lint = "yamllint .github/workflows/"
action-lint = "actionlint"
security-audit = "pip-audit --verbose"
bandit-scan = "bandit -r framework/ -x framework/tests/ -s B101"
detect-secrets = "detect-secrets scan --exclude-files '__pycache__' --exclude-files '*.pyc' --exclude-files '*.egg-info' --exclude-files '.git' --exclude-files 'pixi.lock'"
unit-test = "pytest framework/tests/"

# Performance & Benchmarking
benchmark = "pytest framework/tests/benchmarks/ --benchmark-only --benchmark-sort=mean"
benchmark-save = "pytest framework/tests/benchmarks/ --benchmark-only --benchmark-save=baseline"
benchmark-compare = "pytest framework/tests/benchmarks/ --benchmark-only --benchmark-compare"

# Coverage Analysis
test-coverage = "pytest framework/tests/ --cov=framework --cov-branch --cov-report=html --cov-report=xml --cov-report=json --cov-report=term-missing"
test-coverage-json = "pytest framework/tests/ --cov=framework --cov-branch --cov-report=json --json-report --json-report-file=pytest-report.json"

# Framework-specific tasks
sbom-generate = "cyclonedx-py -o ci-framework-sbom.json"

[tool.ruff]
target-version = "py310"
line-length = 88

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "UP007",  # Use X | Y for type annotations (requires Python 3.10+)
]

[tool.ruff.lint.per-file-ignores]
"framework/tests/**/*" = ["F401", "F811", "F403"]

[tool.mypy]
python_version = "3.10"
check_untyped_defs = false
disallow_any_generics = false
disallow_incomplete_defs = false
disallow_untyped_defs = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
explicit_package_bases = true
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["framework/tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--disable-warnings",
    "--timeout=120",  # 2 minutes per test (optimized for CI)
    "--timeout-method=thread",  # More robust for async/code with subprocesses
    "-ra",
]
timeout = 120  # 2 minutes default timeout for all tests (pytest-timeout)
timeout_method = "thread"
markers = [
    "unit: Unit tests (fast, <30s timeout)",
    "integration: Integration tests (medium, <120s timeout)",
    "property: Property-based tests",
    "security: Security tests",
    "reporting: Reporting tests",
    "performance: Performance tests",
    "maintenance: Maintenance tests",
    "e2e: End-to-end tests (slow, <300s timeout)",
    "slow: Slow tests (extended timeout)",
    "benchmark: Performance benchmark tests (no timeout)",
    "asyncio: Async tests",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.pytest.benchmark]
disable = false
min_rounds = 5
max_time = 60
min_time = 0.01
sort = "mean"
group_by = "group"
columns = ["mean", "stddev", "rounds", "min", "max"]
histogram = true
save_data = true

[tool.coverage.run]
source = ["framework"]
branch = true
parallel = false
omit = [
    "framework/tests/*",
    "framework/__main__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]
show_missing = true
skip_covered = false
precision = 2
fail_under = 90

[tool.coverage.html]
directory = "htmlcov"
title = "CI Framework Coverage Report"

[tool.coverage.xml]
output = "coverage.xml"

[tool.coverage.json]
output = "coverage.json"

[tool.coverage.paths]
source = [
    "framework",
    "*/framework"
]

# Bandit security scanning configuration
[tool.bandit]
exclude_dirs = ["framework/tests"]
skips = ["B101"]  # Allow assert statements in test files
targets = ["framework"]

# Security decisions for CI framework:
# B404: subprocess import - Required for CI functionality, used securely with validation
# B603: subprocess call - Used with shell=False and comprehensive input validation
